kotlin version: 2.0.0
error message: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.base/java.util.ArrayList.iterator(ArrayList.java:947)
	at org.jetbrains.kotlin.fir.java.FirJavaFacade.createFirJavaClass(FirJavaFacade.kt:772)
	at org.jetbrains.kotlin.fir.java.FirJavaFacade.convertJavaClassToFir(FirJavaFacade.kt:165)
	at org.jetbrains.kotlin.fir.java.deserialization.JvmClassFileBasedSymbolProvider.extractClassMetadata$lambda$6(JvmClassFileBasedSymbolProvider.kt:170)
	at org.jetbrains.kotlin.fir.java.deserialization.JvmClassFileBasedSymbolProvider$$Lambda$638/0x00000070015aed90.invoke(Unknown Source)
	at org.jetbrains.kotlin.fir.deserialization.AbstractFirDeserializedSymbolProvider.classCache$lambda$6(AbstractFirDeserializedSymbolProvider.kt:165)
	at org.jetbrains.kotlin.fir.deserialization.AbstractFirDeserializedSymbolProvider$$Lambda$507/0x000000700148b5c8.invoke(Unknown Source)
	at org.jetbrains.kotlin.fir.caches.FirThreadUnsafeCacheWithPostCompute.getValue(FirThreadUnsafeCachesFactory.kt:60)
	at org.jetbrains.kotlin.fir.deserialization.AbstractFirDeserializedSymbolProvider.getClass(AbstractFirDeserializedSymbolProvider.kt:314)
	at org.jetbrains.kotlin.fir.deserialization.AbstractFirDeserializedSymbolProvider.getClass$default(AbstractFirDeserializedSymbolProvider.kt:297)
	at org.jetbrains.kotlin.fir.deserialization.AbstractFirDeserializedSymbolProvider.getClassLikeSymbolByClassId(AbstractFirDeserializedSymbolProvider.kt:371)
	at org.jetbrains.kotlin.fir.resolve.providers.impl.FirCachingCompositeSymbolProvider.computeClass(FirCachingCompositeSymbolProvider.kt:147)
	at org.jetbrains.kotlin.fir.resolve.providers.impl.FirCachingCompositeSymbolProvider.access$computeClass(FirCachingCompositeSymbolProvider.kt:27)
	at org.jetbrains.kotlin.fir.resolve.providers.impl.FirCachingCompositeSymbolProvider$special$$inlined$createCache$1.invoke(FirCachesFactory.kt:71)
	at org.jetbrains.kotlin.fir.resolve.providers.impl.FirCachingCompositeSymbolProvider$special$$inlined$createCache$1.invoke(FirCachesFactory.kt:69)
	at org.jetbrains.kotlin.fir.caches.FirThreadUnsafeCache.getValue(FirThreadUnsafeCachesFactory.kt:40)
	at org.jetbrains.kotlin.fir.resolve.providers.impl.FirCachingCompositeSymbolProvider.getClassLikeSymbolByClassId(FirCachingCompositeSymbolProvider.kt:174)
	at org.jetbrains.kotlin.fir.resolve.LookupTagUtilsKt.toSymbol(LookupTagUtils.kt:59)
	at org.jetbrains.kotlin.fir.resolve.TypeExpansionUtilsKt.directExpansionType(TypeExpansionUtils.kt:94)
	at org.jetbrains.kotlin.fir.resolve.TypeExpansionUtilsKt.fullyExpandedTypeNoCache(TypeExpansionUtils.kt:82)
	at org.jetbrains.kotlin.fir.resolve.TypeExpansionUtilsKt.fullyExpandedType(TypeExpansionUtils.kt:47)
	at org.jetbrains.kotlin.fir.resolve.TypeExpansionUtilsKt.fullyExpandedType$default(TypeExpansionUtils.kt:34)
	at org.jetbrains.kotlin.fir.types.ConeTypePreparator.prepareType(ConeTypePreparator.kt:17)
	at org.jetbrains.kotlin.fir.types.ConeTypePreparator.prepareType(ConeTypePreparator.kt:28)
	at org.jetbrains.kotlin.types.TypeCheckerState.prepareType(AbstractTypeChecker.kt:38)
	at org.jetbrains.kotlin.types.AbstractTypeChecker.completeIsSubTypeOf(AbstractTypeChecker.kt:286)
	at org.jetbrains.kotlin.types.AbstractTypeChecker.isSubtypeOf(AbstractTypeChecker.kt:257)
	at org.jetbrains.kotlin.types.AbstractTypeChecker.isSubtypeOf$default(AbstractTypeChecker.kt:246)
	at org.jetbrains.kotlin.types.AbstractTypeChecker.isSubtypeOf(AbstractTypeChecker.kt:205)
	at org.jetbrains.kotlin.types.AbstractTypeChecker.isSubtypeOf$default(AbstractTypeChecker.kt:199)
	at org.jetbrains.kotlin.fir.java.scopes.JavaClassUseSiteMemberScope.findGetterOverride(JavaClassUseSiteMemberScope.kt:246)
	at org.jetbrains.kotlin.fir.java.scopes.JavaClassUseSiteMemberScope.findGetterOverride(JavaClassUseSiteMemberScope.kt:224)


